# CI/CD pipeline for Proteus Actuarial Library
#
# This workflow runs tests and builds the package using Docker containers
# to ensure consistency with the development environment.
#
# Triggers:
# - Push/PR: Runs tests only for code validation
# - GitHub Release: Runs full pipeline (test → build → publish to PyPI)
#
# Jobs:
# - docker-build: Builds CI image once and shares it across jobs
# - test: Runs pytest with coverage using the shared CI Docker image
# - build: Builds Python package with PDM (release only)  
# - pypi-publish: Publishes to PyPI using trusted publishing (release only)
#
# To release: Create a GitHub Release, which triggers automatic PyPI publishing.
# The CI Docker image uses PDM + uv for fast dependency installation and
# includes all dependencies pre-installed from the 'deps' stage.

name: CI

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]
  release:
    types: [published]

permissions:
  contents: read

jobs:
  docker-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Build CI Docker image
        run: docker build --target ci -t proteus-ci .
        
      - name: Save Docker image
        run: docker save proteus-ci > proteus-ci.tar
        
      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: proteus-ci-image
          path: proteus-ci.tar

  test:
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: proteus-ci-image
          
      - name: Load Docker image
        run: docker load < proteus-ci.tar
        
      - name: Run tests
        run: |
          # Create coverage directory and mount it to container to persist coverage reports
          # Maps host coverage/ to container's /app/coverage so reports survive container exit
          mkdir -p coverage
          docker run --rm -v "$(pwd)/coverage:/app/coverage" proteus-ci \
            pdm run pytest -v --cov=pal --cov-report=xml:coverage/coverage.xml
            
      # Validate example scripts can compile without running them
      # This checks syntax and import resolution without starting Flask servers
      # or other services that would complicate CI testing
      - name: Check examples compile
        run: |
          docker run --rm proteus-ci \
            pdm run python -m compileall examples/ -f
            
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/

  build:
    runs-on: ubuntu-latest
    needs: [docker-build, test]
    # Always build package to ensure build process works

    steps:
      - uses: actions/checkout@v4
      
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: proteus-ci-image
          
      - name: Load Docker image
        run: docker load < proteus-ci.tar
        
      - name: Build package
        # Create dist directory and mount it to container to persist build artifacts
        # Maps host dist/ to container's /app/dist so files survive container exit
        run: |
          mkdir -p dist
          docker run --rm -v "$(pwd)/dist:/app/dist" proteus-ci \
            pdm build

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/
        # Only upload artifacts on releases to save storage
        if: github.event_name == 'release'

  pypi-publish:
    runs-on: ubuntu-latest
    needs: build
    # Only publish to PyPI when a GitHub Release is created
    if: github.event_name == 'release'
    permissions:
      id-token: write

    environment:
      name: pypi

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/